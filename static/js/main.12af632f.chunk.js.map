{"version":3,"sources":["stationDetails.js","App.js","serviceWorker.js","index.js"],"names":["stationDetails","stop_id","stop_name","stop_lat","stop_lon","zone_id","wheelchair_boarding","App","state","stations","componentDidMount","bind","stationName","map","console","log","this","setState","optionsItems","station","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wPAkIiBA,G,MAlIM,CACnB,CACEC,QAAS,OACTC,UAAW,QACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,aACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,cACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,cACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,SACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,cACXC,SAAU,UACVC,SAAU,SACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,QACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,eACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,eACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,oBACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,eACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,cACXC,SAAU,UACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,SACXC,SAAU,SACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,YACXC,SAAU,SACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,UACXC,SAAU,SACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,KAEvB,CACEL,QAAS,OACTC,UAAW,mBACXC,SAAU,SACVC,SAAU,UACVC,QAAS,OACTC,oBAAqB,OC1EVC,E,YA/Cf,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,SAAS,IAEX,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBALb,E,iFAQV,IAAMC,EAAcZ,EAAea,KAAI,SAAEJ,GACtC,OAAOA,KACZK,QAAQC,IAAIH,GACZI,KAAKC,SACH,CAAER,SAAUG,M,+BAOd,IACIM,EADWF,KAAKR,MAAMC,SACEI,KAAI,SAACM,GAAD,OAAa,4BAAQC,IAAKD,EAAQjB,WAAYiB,EAAQjB,cAIrF,OACE,6BACE,gDACA,8BACA,kDACA,gCACQgB,GAEJ,6BACA,qDACA,gCACIA,S,GApCCG,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.12af632f.chunk.js","sourcesContent":["const stationDetails = [\n    {\n      stop_id: \"ALVA\",\n      stop_name: \"Aluva\",\n      stop_lat: \"10.1099\",\n      stop_lon: \"76.3495\",\n      zone_id: \"ALVA\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"PNCU\",\n      stop_name: \"Pulinchudu\",\n      stop_lat: \"10.0951\",\n      stop_lon: \"76.3466\",\n      zone_id: \"PNCU\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"CPPY\",\n      stop_name: \"CompanyPady\",\n      stop_lat: \"10.0873\",\n      stop_lon: \"76.3428\",\n      zone_id: \"CPPY\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"ATTK\",\n      stop_name: \"Ambattukavu\",\n      stop_lat: \"10.0793\",\n      stop_lon: \"76.3389\",\n      zone_id: \"ATTK\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"MUTT\",\n      stop_name: \"Muttom\",\n      stop_lat: \"10.0727\",\n      stop_lon: \"76.3336\",\n      zone_id: \"MUTT\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"KLMT\",\n      stop_name: \"Kalamassery\",\n      stop_lat: \"10.0586\",\n      stop_lon: \"76.322\",\n      zone_id: \"KLMT\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"CCUV\",\n      stop_name: \"Cusat\",\n      stop_lat: \"10.0467\",\n      stop_lon: \"76.3182\",\n      zone_id: \"CCUV\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"PDPM\",\n      stop_name: \"Pathadipalam\",\n      stop_lat: \"10.0361\",\n      stop_lon: \"76.3144\",\n      zone_id: \"PDPM\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"EDAP\",\n      stop_name: \"Edapally Jn.\",\n      stop_lat: \"10.0251\",\n      stop_lon: \"76.3083\",\n      zone_id: \"EDAP\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"CGPP\",\n      stop_name: \"Changampuzha Park\",\n      stop_lat: \"10.0152\",\n      stop_lon: \"76.3023\",\n      zone_id: \"CGPP\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"PARV\",\n      stop_name: \"Palarivattom\",\n      stop_lat: \"10.0064\",\n      stop_lon: \"76.3048\",\n      zone_id: \"PARV\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"JLSD\",\n      stop_name: \"JLN Stadium\",\n      stop_lat: \"10.0002\",\n      stop_lon: \"76.2989\",\n      zone_id: \"JLSD\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"KALR\",\n      stop_name: \"Kaloor\",\n      stop_lat: \"9.9943\",\n      stop_lon: \"76.2914\",\n      zone_id: \"KALR\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"LSSE\",\n      stop_name: \"Lissie Jn\",\n      stop_lat: \"9.9914\",\n      stop_lon: \"76.2884\",\n      zone_id: \"LSSE\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"MGRD\",\n      stop_name: \"MG Road\",\n      stop_lat: \"9.9834\",\n      stop_lon: \"76.2823\",\n      zone_id: \"MGRD\",\n      wheelchair_boarding: \"1\",\n    },\n    {\n      stop_id: \"MACE\",\n      stop_name: \"Maharaja College\",\n      stop_lat: \"9.9732\",\n      stop_lon: \"76.2851\",\n      zone_id: \"MACE\",\n      wheelchair_boarding: \"1\",\n    },\n  ];\n  export default stationDetails","import React from 'react';\n\nimport './App.css';\nimport stationDetails from './stationDetails'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      stations:[],\n    }\n    this.componentDidMount = this.componentDidMount.bind(this)\n  }\n    componentDidMount() {\n      const stationName = stationDetails.map(( stations) => \n        {return stations} )\n    console.log(stationName)\n    this.setState(\n      { stations: stationName }\n       \n    )\n    \n  }\n  \n  render() {\n    let stations = this.state.stations\n    let optionsItems = stations.map((station) => <option key={station.stop_name}>{station.stop_name}</option>)\n  \n\n  \n     return (\n       <div>\n         <h1> Fare calculator</h1>\n         <form>\n         <label>Starting Point:</label>\n         <select>\n                {optionsItems}\n             </select>\n             <br/>\n             <label>Destination Point:</label>\n             <select>\n                {optionsItems}\n             </select>\n\n         </form>\n       </div>      \n            \n     )\n    }\n  }\n\n  \n  \n  export default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}